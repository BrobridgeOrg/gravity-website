<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>準備開始 on GRAVITY</title><link>http://gravity.brobridge.com/zh-tw/getting-started/</link><description>Recent content in 準備開始 on GRAVITY</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="http://gravity.brobridge.com/zh-tw/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>系統環境準備</title><link>http://gravity.brobridge.com/zh-tw/getting-started/prepare-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://gravity.brobridge.com/zh-tw/getting-started/prepare-environment/</guid><description>開始搭建任何 GRAVITY 的資料鏈路之前，需要先建構 NATS 的訊息佇列網路，因此在開始一切安裝部署之前，請先確定您有可用的 NATS 服務供 GRAVITY 使用。如果你的環境裡沒有任何可用的 NATS 服務，可以依照本文件的指引進行安裝。本說明文件將會以 Docker Compose 作為安裝 NATS 的說明和示範，可方便於本機或是虛擬機上進行安裝，如果你是在其他平台上，請參閱 NATS 官方文件的其他安裝方法。
首先準備一個 YAML，選擇使用 NATS 的容器映像檔，並開通對外的 4222 連接埠：
nats.yaml 1 2 3 4 5 6 7 8 9 10 11 version:&amp;#39;3&amp;#39;services:# Gravity Core Componentsinternal-nats-server:image:&amp;#34;nats:2.2.6&amp;#34;restart:alwaysexpose:- &amp;#34;4222&amp;#34;ports:- &amp;#34;4222:4222&amp;#34; 然後於終端機介面執行下列安裝命令：
docker-compose -f nats.yaml up -d 安裝完成後，NATS 服務會運行在 4222 Port，之後我們就會使用 NATS 的連線資訊來設定 GRAVITY 的各個元件。
不知道 NATS 服務的完整連線位址？
因為容器隔離性的問題，在同一台機器上想要從一個容器裡連線另一個容器內的服務，需要知道 Docker 網路介面的 IP 位置，可以用下列命令取得：</description></item><item><title>客製化打造第一條管線</title><link>http://gravity.brobridge.com/zh-tw/getting-started/customized-first-pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://gravity.brobridge.com/zh-tw/getting-started/customized-first-pipe/</guid><description>如果你已經閱讀過「快速上手」，應該已經知道 GRAVITY 能透過 Docker 進行快速部署。只不過因為在該文件中並沒有說明設定細節，你可能還不知道如何客製化一條真正有用的資料管線。因此，本文件將延續案例，示範如何打造您的第一條資料管線之外，並會初步針對設定工作進行更多細節說明。
實作目標 延續快速上手的範例，本文的實作目標仍然是打造一條管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫，如下圖所示：
flowchart LR source([MySQL\n資料庫系統]) -- |推送資料更新| gravity{{GRAVITY}} gravity((GRAVITY\n數據鏈路節點)) -- |寫入資料| target([PostgreSQL\n資料庫系統]) class gravity gravity; classDef gravity fill:#fff,color:#b00,stroke:#b00,stroke-width:5px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 實作架構 flowchart LR source([MySQL]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitter(資料傳輸器\nTransmitter) end transmitter(資料傳輸器\nTransmitter) -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitter transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 依圖所示，此範例中實作上會由三個部分所組成，形成完整的數據鏈路：</description></item><item><title>實現資料多副本抄寫</title><link>http://gravity.brobridge.com/zh-tw/getting-started/replication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://gravity.brobridge.com/zh-tw/getting-started/replication/</guid><description>本文件將說明如何定義一條管線，利用 GRAVITY 實現做一對多副本抄寫機制。如果你有實現讀寫分離、提升併發查詢量的需求，可以利用本文件所說的方法來快速打造出來。
實作目標 本文將會打造一條管線，從一個資料源 MySQL 將資料讀出，然後抄寫至多個個副本資料庫，如下圖所示：
flowchart LR source([MySQL\n資料庫系統]) -- |推送資料更新| gravity{{GRAVITY}} gravity((GRAVITY\n數據鏈路節點)) -- |寫入| targetA([MySQL 資料庫\n副本 1]) gravity((GRAVITY\n數據鏈路節點)) -- |寫入| targetB([MySQL 資料庫\n副本 2]) gravity((GRAVITY\n數據鏈路節點)) -- |寫入| targetC([MySQL 資料庫\n副本 3]) class gravity gravity; classDef gravity fill:#fff,color:#b00,stroke:#b00,stroke-width:5px; class source,targetA,targetB,targetC database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 實作架構 實現抄寫多個副本的方法，主要藉由建立多個「資料傳輸器（Transmitter）」，從 GRAVITY 資料節點中把資料取出，然後寫到不同的目標資料庫，完整架構如下：
flowchart LR subgraph GRAVITY gravity{{GRAVITY\n資料節點}} -- transmitterA gravity -- transmitterB gravity -- transmitterC end transmitterA(資料傳輸器 1\nTransmitter) -- |寫入資料| targetA([MySQL]) transmitterB(資料傳輸器 2\nTransmitter) -- |寫入資料| targetB([MySQL]) transmitterC(資料傳輸器 3\nTransmitter) -- |寫入資料| targetC([MySQL]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA,transmitterB,transmitterC transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class targetA,targetB,targetC database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 部署前的假設前提</description></item><item><title>快速上手</title><link>http://gravity.brobridge.com/zh-tw/getting-started/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://gravity.brobridge.com/zh-tw/getting-started/quick-start/</guid><description>本文件作爲 Gravity Quick-Start 的快速部署操作指引，將說明如何部署一套最簡單的 Gravity 資料複寫（Replication）管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫。
flowchart LR source([MySQL\n資料庫系統]) -- |推送資料更新| gravity{{GRAVITY}} gravity((GRAVITY\n數據鏈路節點)) -- |寫入資料| target([PostgreSQL\n資料庫系統]) class gravity gravity; classDef gravity fill:#fff,color:#b00,stroke:#b00,stroke-width:5px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 環境準備 此範例將利用 Docker 進行部署，如果測試系統上還沒安裝 docker-compose 套件，請先完成安裝：
# for Ubuntu: apt-get install -y docker-compose # for CentOS: yum install -y docker-compose 如果你已經安裝好 docker-compose，那就可以正式開始 Gravity 的安裝。
安裝 Gravity 待系統環境準備好後，可以開始安裝 Gravity 相關的元件。</description></item></channel></rss>