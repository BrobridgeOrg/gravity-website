<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>準備開始 on GRAVITY</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/</link><description>Recent content in 準備開始 on GRAVITY</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>客製化打造第一條管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</guid><description>如果你已經閱讀過「快速上手」，應該已經知道 GRAVITY 能透過 Docker 進行快速部署。只不過因為在該文件中並沒有說明設定細節，你可能還不知道如何客製化一條真正有用的資料管線。因此，本文件將延續案例，示範如何打造您的第一條資料管線之外，並會初步針對設定工作進行更多細節說明。
實作目標 延續快速上手的範例，本文的實作目標仍然是打造一條管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫，如下圖所示：
flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 注意
這裡假設你已經分別安裝好 MySQL 和 PostgreSQL，如果尚未安裝資料庫系統，請先準備好環境後再繼續進行本文件的指引。
環境準備 GRAVITY 使用 NATS 作為核心的訊息交換引擎，再開始一切安裝部署之前，需要先安裝 NATS 元件： nats.yaml 1 2 3 4 5 6 7 8 9 10 11 version:&amp;#39;3&amp;#39;services:# Gravity Core Componentsinternal-nats-server:image:&amp;#34;nats:2.</description></item><item><title>一對一管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/1-on-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/1-on-1/</guid><description>一對ㄧ管線是資料系統架構的起手式，能從單一資料源接收資料，然後將資料推送到指定接收端。實務上，一對多管線能實現資料庫同步對抄、資料遷移、資料快取、主從架構（Master-Slave）和資料庫熱備份備援等機制。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>一對多管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/1-on-n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/1-on-n/</guid><description>一對多管線能從單一資料源接收資料，然後將資料同時傳輸到多個接收端。實務上，一對多管線能實現的資料庫多重複寫（Replication）機制，生成多份資料副本，藉由副本數量的擴展來增加資料庫的併發查詢能力。此外，也可以利用一對多管線實現資料分片（Sharding）機制。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) gravity{{GRAVITY\n資料節點}} -- transmitterB(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器 A\nTransmitter) -- |寫入副本資料| targetA([目標資料庫 A]) transmitterB(資料傳輸器 B\nTransmitter) -- |寫入副本資料| targetB([目標資料庫 B]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA,transmitterB transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA,targetB database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>多對一管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/n-on-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/n-on-1/</guid><description>多對一管線用於收集多個資料源的資料，然後進行聚合、關聯處理。實務上，多對一管線被用於實現合併複寫（Merge Replication）以跨資料庫系統的資料關聯，或是用於改善瞬間巨量寫入時的場景，將分流寫入的資料匯整到指定的落地資料庫。
flowchart LR sourceA([源頭資料庫 A]) -- |推送資料更新| adapterA(資料源適配器 A\nAdapter) sourceB([源頭資料庫 B]) -- |推送資料更新| adapterB(資料源適配器 B\nAdapter) subgraph GRAVITY adapterA -- gravity{{GRAVITY\n資料節點}} adapterB -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapterA,adapterB adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class sourceA,sourceB,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>資料節點對連鏈路</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/datanode-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/datanode-link/</guid><description>資料節點對連鏈路，可以從另一個資料節點訂閱資料，然後等待進一步處理，通常用於跨組織資料授權管理、跨雲資料整合場景。對於資料系統來說，善用資料節點的對連鏈路進行架構設計，可以構成極具彈性的資料供應架構。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY A adapter(資料源適配器\nAdapter) -- gravityA{{GRAVITY\n資料節點 A}} end gravityA{{GRAVITY\n資料節點 A}} == Link == gravityB{{GRAVITY\n資料節點 B}} subgraph GRAVITY B gravityB{{GRAVITY\n資料節點 B}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravityA,gravityB gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 多節點對連 利用資料節點的對連，能實現虛擬的資料鏈路，把資料供應到更多地方，並組合運用 GRAVITY 的各種機制（如：複寫、快取、分片和聚合等），實現更複雜的資料供應架構改造，形成一個可以動態彈性擴展的資料系統，完全軟體定義資料系統架構。
flowchart LR sourceA([源頭資料庫 A]) -- |推送資料更新| adapterA(資料源適配器\nAdapter) subgraph 資料代理 adapterA(資料源適配器\nAdapter) -- gravityA{{GRAVITY\n資料節點 A}} end sourceB([源頭資料庫 B]) -- |推送資料更新| adapterB(資料源適配器\nAdapter) sourceC([源頭資料庫 C]) -- |推送資料更新| adapterB(資料源適配器\nAdapter) subgraph 資料聚合 adapterB(資料源適配器\nAdapter) -- gravityD{{GRAVITY\n資料節點 D}} end gravityA{{GRAVITY\n資料節點 A}} == gravityB{{GRAVITY\n資料節點 B}} gravityA{{GRAVITY\n資料節點 A}} == gravityC{{GRAVITY\n資料節點 C}} gravityD{{GRAVITY\n資料節點 D}} == gravityC{{GRAVITY\n資料節點 C}} subgraph 資料複寫同步 gravityB{{GRAVITY\n資料節點 B}} -- transmitterA(資料傳輸器\nTransmitter) end subgraph 資料分片 gravityC{{GRAVITY\n資料節點 C}} -- transmitterB(資料傳輸器\nTransmitter) gravityC{{GRAVITY\n資料節點 C}} -- transmitterC(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([副本資料庫]) transmitterB(資料傳輸器\nTransmitter) -- |寫入分片 A| targetB([分片資料庫 A]) transmitterC(資料傳輸器\nTransmitter) -- |寫入分片 B| gravityE{{GRAVITY\n資料節點 E}} subgraph 資料再分片 gravityE{{GRAVITY\n資料節點 E}} -.</description></item><item><title>快速上手</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</guid><description>本文件作爲 Gravity Quick-Start 的快速部署操作指引，將說明如何部署一套最簡單的 Gravity 資料複寫（Replication）管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫。
flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 環境準備 此範例將利用 Docker 進行部署，如果測試系統上還沒安裝 docker-compose 套件，請先完成安裝：
# for Ubuntu: apt-get install -y docker-compose # for CentOS: yum install -y docker-compose 如果你已經安裝好 docker-compose，那就可以正式開始 Gravity 的安裝。
安裝 Gravity 待系統環境準備好後，可以開始安裝 Gravity 相關的元件。</description></item></channel></rss>