<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>準備開始 on GRAVITY</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/</link><description>Recent content in 準備開始 on GRAVITY</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>客製化打造第一條管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</guid><description>如果你已經閱讀過「快速上手」，應該已經知道 GRAVITY 能透過 Docker 進行快速部署。只不過因為在該文件中並沒有說明設定細節，你可能還不知道如何客製化一條真正有用的資料管線。因此，本文件將延續案例，示範如何打造您的第一條資料管線之外，並會初步針對設定工作進行更多細節說明。
實作目標 延續快速上手的範例，本文的實作目標仍然是打造一條管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫，如下圖所示：
flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 注意
這裡假設你已經分別安裝好 MySQL 和 PostgreSQL，如果尚未安裝資料庫系統，請先準備好環境後再繼續進行本文件的指引。
環境準備 GRAVITY 使用 NATS 作為核心的訊息交換引擎，再開始一切安裝部署之前，需要先安裝 NATS 元件：
待補充... 正常安裝完成後，NATS 應該會運行在 localhost:4222 之上，接下來我們將會以此位置進行 GRAVITY 的設定。
安裝設定與部署 flowchart LR source([MySQL]) -- |推送資料更新| adapter(資料源適配器\nAdapter) adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitter(資料傳輸器\nTransmitter) transmitter(資料傳輸器\nTransmitter) -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitter transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; Step 1: 部署 GRAVITY 資料節點 GRAVITY 的資料節點由控制器（Controller）和同步器（Synchronizer）兩個核心元件所組成，我們分別各準備一個 YAML 為其做設定和部署：</description></item><item><title>快速上手</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</guid><description>本文件作爲 Gravity Quick-Start 的快速部署操作指引，將說明如何部署一套最簡單的 Gravity 資料複寫（Replication）管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫。
flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 環境準備 此範例將利用 Docker 進行部署，如果測試系統上還沒安裝 docker-compose 套件，請先完成安裝：
# for Ubuntu: apt-get install -y docker-compose # for CentOS: yum install -y docker-compose 如果你已經安裝好 docker-compose，那就可以正式開始 Gravity 的安裝。
安裝 Gravity 待系統環境準備好後，可以開始安裝 Gravity 相關的元件。</description></item></channel></rss>