<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GRAVITY</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/</link><description>Recent content on GRAVITY</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><atom:link href="https://brobridgeorg.github.io/gravity-website/zh-tw/index.xml" rel="self" type="application/rss+xml"/><item><title>GRAVITY 簡介</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/about/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/about/introduction/</guid><description>為因應數位轉型的資料架構需要，寬橋（Brobridge）打造了 GRAVITY 作為資料系統的關鍵基礎設施技術，輕易解決企業內眾多應用的資料交換、供應問題，讓企業真正終結資料孤島的問題，全面滿足所有應用的資料需求。無論使用的資料庫系統為何，都不必再擔心資料庫系統擴展性、併發查詢能力和效能不足的問題，讓應用盡情地使用企業內各種資料。
導入「軟體定義」的數據中台技術後，資料系統架構不再臃腫巨大、複雜的難以維護，過去需要依賴龐大叢集架構才能達成的各種功能，皆可以輕易實現。GRAVITY 能依據應用的實際情境，更彈性地量身打造高效、高彈性的資料系統，無需大規模改造既有資料庫系統架構。並能擴大既有資料庫系統的吞吐能力、擴展能力和容錯能力，以同時滿足「巨量資料」和「高併發」的目標，支撐千變萬化之商業應用，為企業成就更高的數位轉型價值。
此外，跨雲的資料需求，也可以藉由打造跨域的 GRAVITY 數據節點，實現高速資料遷移、聚合、快取，如同內容傳遞網路（CDN）一般快速發佈到不同的雲端平台，讓應用程式能直接在最近的資料節點上取的所需資料。為了控管資料存取，您也可以用 GRAVITY 打造數據網格（Data Mesh）管理機制，嚴密控管所有的資料節點和資料系統基礎設施，實現跨第三方的資料交換和發佈供應。
什麼是數據中台？ 數據中台是資料庫和資料庫之間的中間層，提供一個資料流抽象層，讓分散在不同系統的數據資料，得以自由調度、整合、發佈以滿足眾多實際應用的需要。以往資料管理和調度的工作，需仰賴單一特定的資料庫或資料倉儲系統來完成，擴充彈性有限、用途也受限特定架構，因此效能表現難以兼顧「巨量資料」和「高併發」的需求，並且多資料使用者的管理更是一大痛點。而數據中台技術的導入，能讓資料庫和資料倉儲系統專心於本來的業務之上，無需擔心擴展或高併發作業的問題，也從中間層的角度實現資料權限的管控。
可以說，數據中台目的在於實現「軟體定義」的資料系統架構，讓既有資料系統從傳統孤島（Silo）型架構，變成一個極具彈性、擴展性、任何系統能相互支援的全新樣貌，以滿足任何數位轉型的需要。
以下是導入數據中台的十大好處：
提升既有資料庫系統的各項效能表現 延續老系統的壽命，增加其擴展和容錯能力 滿足應用系統的高效率資料調度需求 保護既有資料庫系統不受巨量應用的效能衝擊 簡化跨組織、單位的資料控管和治理 實現數據資料的即時應用 跨異質資料庫系統的整合 跨雲、跨資料庫系統、跨應用的資料遷移 快速實現各類資料庫熱備援和備份 資料系統有更短的反應時間和擴展彈性，滿足應用業務未來千變萬化的不合理需求 以更貼近日常生活的例子來說明
想像有個系統提供了一個可客制的物流平台，讓貨物不再只從特定單一的大型集中倉庫出貨，而是可以依照業務需求設計物流鏈路和流程，將貨物分送到離目標更近的倉庫或轉運節點，以成本更低、效率更好也更輕鬆的方式，供應貨物給商店或終端使用者。若目標地區使用者密度大、貨物需求量高，則可以擴大地區倉庫或增加更多中繼倉庫，配合新的地區物流鏈路設計，來滿足更多的需求。而這樣高度彈性能自由打造物流鏈路系統的平台，套用在資料系統上就是數據中台所扮演的角色。</description></item><item><title>一對一管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/1-on-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/1-on-1/</guid><description>一對ㄧ管線是資料系統架構的起手式，能從單一資料源接收資料，然後將資料推送到指定接收端。實務上，一對多管線能實現資料庫同步對抄、資料遷移、資料快取、主從架構（Master-Slave）和資料庫熱備份備援等機制。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>一對多管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/1-on-n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/1-on-n/</guid><description>一對多管線能從單一資料源接收資料，然後將資料同時傳輸到多個接收端。實務上，一對多管線能實現的資料庫多重複寫（Replication）機制，生成多份資料副本，藉由副本數量的擴展來增加資料庫的併發查詢能力。此外，也可以利用一對多管線實現資料分片（Sharding）機制。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) gravity{{GRAVITY\n資料節點}} -- transmitterB(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器 A\nTransmitter) -- |寫入副本資料| targetA([目標資料庫 A]) transmitterB(資料傳輸器 B\nTransmitter) -- |寫入副本資料| targetB([目標資料庫 B]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA,transmitterB transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA,targetB database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>技術架構說明</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/about/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/about/architecture/</guid><description>GRAVITY 是資料庫與資料庫之間溝通的中介層，讓資料庫的資料藉由中介資料節點，可以分流、遷移、複製、快取於不同的系統之中。為了連接和適應各種不同的資料庫系統、應用系統，GRAVITY 被設計得相當輕量，而且具有許多彈性，方便資料管理者、開發人員可以自由部署和設計自己所需的資料系統架構。
GRAVITY 主要元件 設計上，GRAVITY 主要工作是建立一個資料節點，然後從資料源接收資料，並對資料進行記錄、快照等工作。有需要的應用系統，可以跟資料節點訂閱資料，並將資料落地於指定的資料庫系統、訊息佇列或推送至另一個應用程式。
為實現這樣的機制，GRAVITY 由三大元件所組成：
資料源適配器：Adapter 資料節點同步器：Synchronizer 資料傳輸器：Transmitter 資料源適配器：Adapter 資料源適配器（Adapter）用於從資料源（Data Source）收集資料，並將資料送入資料節點同步器。
資料節點同步器：Synchronizer 資料節點同步器（Synchronizer）會將資料分類保存，並即時生成資料快照（Snapshot）。
資料傳輸器：Transmitter 資料傳輸器（Transmitter）會在資料節點上訂閱資料，然後將資料寫入到目標的資料庫、訊息佇列或是應用系統。</description></item><item><title>系統環境準備</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/prepare-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/prepare-environment/</guid><description>開始搭建任何 GRAVITY 的資料鏈路之前，需要先建構 NATS 的訊息佇列網路，因此在開始一切安裝部署之前，請先確定您有可用的 NATS 服務供 GRAVITY 使用。如果你的環境裡沒有任何可用的 NATS 服務，可以依照本文件的指引進行安裝。本說明文件將會以 Docker Compose 作為安裝 NATS 的說明和示範，可方便於本機或是虛擬機上進行安裝，如果你是在其他平台上，請參閱 NATS 官方文件的其他安裝方法。
首先準備一個 YAML，選擇使用 NATS 的容器映像檔，並開通對外的 4222 連接埠：
nats.yaml 1 2 3 4 5 6 7 8 9 10 11 version:&amp;#39;3&amp;#39;services:# Gravity Core Componentsinternal-nats-server:image:&amp;#34;nats:2.2.6&amp;#34;restart:alwaysexpose:- &amp;#34;4222&amp;#34;ports:- &amp;#34;4222:4222&amp;#34; 然後於終端機介面執行下列安裝命令：
docker-compose -f nats.yaml up -d 安裝完成後，NATS 服務會運行在 4222 Port，之後我們就會使用 NATS 的連線資訊來設定 GRAVITY 的各個元件。
不知道 NATS 服務的完整連線位址？
因為容器隔離性的問題，在同一台機器上想要從一個容器裡連線另一個容器內的服務，需要知道 Docker 網路介面的 IP 位置，可以用下列命令取得：</description></item><item><title>多對一管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/n-on-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/n-on-1/</guid><description>多對一管線用於收集多個資料源的資料，然後進行聚合、關聯處理。實務上，多對一管線被用於實現合併複寫（Merge Replication）以跨資料庫系統的資料關聯，或是用於改善瞬間巨量寫入時的場景，將分流寫入的資料匯整到指定的落地資料庫。
flowchart LR sourceA([源頭資料庫 A]) -- |推送資料更新| adapterA(資料源適配器 A\nAdapter) sourceB([源頭資料庫 B]) -- |推送資料更新| adapterB(資料源適配器 B\nAdapter) subgraph GRAVITY adapterA -- gravity{{GRAVITY\n資料節點}} adapterB -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapterA,adapterB adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class sourceA,sourceB,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;</description></item><item><title>客製化打造第一條管線</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/customized-first-pipe/</guid><description>如果你已經閱讀過「快速上手」，應該已經知道 GRAVITY 能透過 Docker 進行快速部署。只不過因為在該文件中並沒有說明設定細節，你可能還不知道如何客製化一條真正有用的資料管線。因此，本文件將延續案例，示範如何打造您的第一條資料管線之外，並會初步針對設定工作進行更多細節說明。
實作目標 延續快速上手的範例，本文的實作目標仍然是打造一條管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫，如下圖所示：
flowchart LR source([MySQL\n資料庫系統]) -- |推送資料更新| gravity{{GRAVITY}} gravity((GRAVITY\n數據鏈路節點)) -- |寫入資料| target([PostgreSQL\n資料庫系統]) class gravity gravity; classDef gravity fill:#fff,color:#b00,stroke:#b00,stroke-width:5px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 實作架構 flowchart LR source([MySQL]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY adapter(資料源適配器\nAdapter) -- gravity{{GRAVITY\n資料節點}} gravity{{GRAVITY\n資料節點}} -- transmitter(資料傳輸器\nTransmitter) end transmitter(資料傳輸器\nTransmitter) -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitter transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 依圖所示，此範例中實作上會由三個部分所組成，形成完整的數據鏈路：</description></item><item><title>應用場景</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/about/scenario/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/about/scenario/</guid><description>GRAVITY 能立即改善既有資料庫系統的各種問題，無需改造應用程式，也不用改造並搭建複雜、難以維護的資料庫叢集。資料系統架構師可以依據應用場景，引入不同的 GRAVITY 參考架構，自由組合成所需的各類解決方案。
以下是常見的應用場景：
老資料庫系統負荷過高 需要瞬間巨量寫入資料 滿足大量併發查詢 資料快取 實現跨資料庫系統的大量併發查詢 異質資料庫整合和抄寫 跨雲資料遷移、快取、大量併發查詢 跨組織單位的資料控管，數據網格管理 資料庫熱備援 老資料庫系統負荷過高 隨著數位轉型對資料的需求越來越多，應用程式也不斷增加，過去老舊系統的資料庫系統同不堪負荷。由於改造老系統的風險太高，甚至是舊技術已鮮有人懂，以致提升老系統能力是一大痛點。為此， GRAVITY 能在對資料庫不侵入的情況下，擴大老舊系統的併發查詢能力、寫入能力，讓老系統的表現也能跟得上新應用的發展。
需要瞬間巨量寫入資料 大量的資料寫入會造成資料庫衝擊，除了寫入效率差之外，還可能會因為寫入失敗而遺失資料。利用 GRAVITY 的資料調度能力，能實現資料庫的寫入分流、分片（Sharding），讓資料庫得以橫向擴展來強化寫入效率。在這樣的架構下，無需改動任何應用程式連接資料庫系統的方法，可無痛增強既有架構。
滿足大量併發查詢 無論是龐大的使用者同時使用系統，還是無數的應用跨系統進行資料查詢，巨量的併發查詢總是讓資料庫崩潰。為滿足這樣的大量查詢，GRAVITY 提供了「更快速」、「更彈性」的架構方法，只要簡單幾個設定，短短數分鐘之內，就能實現多副本抄寫，擴大資料庫系統的查詢能力。
資料快取 針對一些特殊應用需要頻繁查詢特定資料，或有一定查詢複雜度的工作，GRAVITY 能用資料篩選機制抽取特定欄位之資料，並對該資料進行聚合和快取，大幅度加速特定查詢工作的效率。甚至可以搭配 GRAVITY 多副本擴展機制，近一步擴大資料快取的併發查詢能力。
實現跨資料庫系統的大量併發查詢 正常情況下，跨多資料庫之間的關聯併發查詢效率極差，甚至會造成網路和資料源頭系統的極高壓力。利用 GRAVITY 的資料聚合機制，可以先將不同資料庫的資料抽取和合併在一起，讓應用取用關聯資料時，無需回到源頭查詢。若對關聯資料有極大併發查詢需求，也可以進一步利用 GRAVITY 多副本抄寫機制，對其進行擴展。
異質資料庫整合和抄寫 因應不同應用程式的需求，會需要讓資料落地於不同類型的資料庫，方便進行處理；也需要從不同的資料庫取得資料，進行各類整合應用。利用 GRAVITY 可以輕易的讓資料在不同的資料庫系統之間複製、抄寫、聚合，滿足這類異質資料庫的整合需求。
跨雲資料遷移、快取、大量併發查詢 跨雲的資料需求往往造成嚴重的網路壓力，這類跨域、跨網路資料查詢的效率也不佳。在這種情況下，利用 GRAVITY 的資料節點作為中繼站，可以壓縮跨雲之間的通俊資料量，紓解往返（Round-Trip）查詢的的龐大壓力。若同時應用 GRAVITY 的各種資料調度機制，實現跨雲的資料快取、發佈、聚合，滿足於另一個雲端平台上的應用需求。</description></item><item><title>基本系統需求</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/about/basic-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/about/basic-requirements/</guid><description>GRAVITY 設計上走輕量、彈性路線，部署規模可以依據實際需求而定，而針對不同考量，目前標準支援兩種部署的環境：
使用 Docker 使用 Kubernetes 容器調度平台（企業版本專屬）</description></item><item><title>資料節點對連鏈路</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/datanode-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/datanode-link/</guid><description>資料節點對連鏈路，可以從另一個資料節點訂閱資料，然後等待進一步處理，通常用於跨組織資料授權管理、跨雲資料整合場景。對於資料系統來說，善用資料節點的對連鏈路進行架構設計，可以構成極具彈性的資料供應架構。
flowchart LR source([源頭資料庫]) -- |推送資料更新| adapter(資料源適配器\nAdapter) subgraph GRAVITY A adapter(資料源適配器\nAdapter) -- gravityA{{GRAVITY\n資料節點 A}} end gravityA{{GRAVITY\n資料節點 A}} == Link == gravityB{{GRAVITY\n資料節點 B}} subgraph GRAVITY B gravityB{{GRAVITY\n資料節點 B}} -- transmitterA(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([目標資料庫]) class gravityA,gravityB gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitterA transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 多節點對連 藉由資料節點的對連，可把多個管線相互對接，形成更龐大的資料鏈路，把資料供應到更多地方。組合運用 GRAVITY 的各種機制（如：複寫、快取、分片和聚合等），打造一個可以動態彈性擴展的資料系統，即可用軟體定義的方式，自由改造資料系統架構，不再受到既有資料庫系統能力、硬體規模、距離或區域所限制。
flowchart LR sourceA([源頭資料庫 A]) -- |推送資料更新| adapterA(資料源適配器\nAdapter) subgraph 資料代理 adapterA(資料源適配器\nAdapter) -- gravityA{{GRAVITY\n資料節點 A}} end sourceB([源頭資料庫 B]) -- |推送資料更新| adapterB(資料源適配器\nAdapter) sourceC([源頭資料庫 C]) -- |推送資料更新| adapterB(資料源適配器\nAdapter) subgraph 資料聚合 adapterB(資料源適配器\nAdapter) -- gravityD{{GRAVITY\n資料節點 D}} end gravityA{{GRAVITY\n資料節點 A}} == gravityB{{GRAVITY\n資料節點 B}} gravityA{{GRAVITY\n資料節點 A}} == gravityC{{GRAVITY\n資料節點 C}} gravityD{{GRAVITY\n資料節點 D}} == 授權訂閱 == gravityC{{GRAVITY\n資料節點 C}} subgraph 資料複寫同步 gravityB{{GRAVITY\n資料節點 B}} -- transmitterA(資料傳輸器\nTransmitter) end subgraph 資料分片 gravityC{{GRAVITY\n資料節點 C}} -- transmitterB(資料傳輸器\nTransmitter) gravityC{{GRAVITY\n資料節點 C}} -- transmitterC(資料傳輸器\nTransmitter) end transmitterA(資料傳輸器\nTransmitter) -- |寫入資料| targetA([副本資料庫]) transmitterB(資料傳輸器\nTransmitter) -- |寫入分片 A| targetB([分片資料庫 A]) transmitterC(資料傳輸器\nTransmitter) -- |寫入分片 B| gravityE{{GRAVITY\n資料節點 E}} subgraph 資料再分片 gravityE{{GRAVITY\n資料節點 E}} -.</description></item><item><title>FAQ 疑難排解</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/about/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/about/faq/</guid><description>這裡收集了一些對於 GRAVITY 的常見問題，以及相關疑難解答。
一般問題 GRAVITY 是資料庫或資料倉儲嗎？ 資料庫抄寫很普通，GRAVITY 有什麼過人之處？ GRAVITY 需要付費才能使用嗎？ 部署安裝問題 GRAVITY 是否能夠單機部署？ GRAVITY 能在 Kubernetes 平台上部署嗎？ Kubernetes 上是否有更簡便的方式，大規模部署和管理 GRAVITY 資料管線？ 我需要的資料源或是傳輸器類型不在標準支援清單上，要怎麼辦？ 目前 Gravity 支援哪些作業系統平台環境？ Gravity 可以支援讀取哪些資料庫的 CDC (資料擷取) 的支援有哪些 Gravity 可以將資料處理完成後輸出寫入目的資料庫，可支援寫入資料庫平台 使用 Oracle 資料庫的 CDC 功能，資料庫系統是否要啟用 goldengate 支援 Gravity 對不同來源資料庫 CDC 的數據處理能力為何 一般問題 GRAVITY 是資料庫或資料倉儲嗎？ 不是，GRAVITY 並不是資料庫系統或是資料倉儲。
GRAVITY 是資料庫與資料庫之間的中間層，讓分散在不同系統的數據資料，得以自由調度、整合、發佈和快取，以滿足眾多實際應用的需要。</description></item><item><title>事件資料集</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/concept/collection/</guid><description>GRAVITY 的資料節點會在從資料源收集變更事件之後，由內建的資料處理器對事件進行分類聚合工作，最後以「資料集（Collection）」的形式保存，應用可以自由選擇資料集及進行訂閱，接收並取得所需要的資料。
flowchart LR source([資料源\nData Source]) -- eventA(變更事件) source -- eventB(新增事件) source -- eventC(修改事件) source -- eventD(刪除事件) eventA -- gravity((資料處理器\nData Handler)) eventB -- gravity eventC -- gravity eventD -- gravity subgraph GRAVITY 資料節點 gravity -- |分類儲存| collectionA gravity -- |分類儲存| collectionB gravity -- collectionC(更多資料集\n...) end collectionA(資料集 A\nCollection) -- |訂閱資料| targetA([目標資料庫\nTarget]) collectionB(資料集 B\nCollection) -- |訂閱資料| targetA class gravity gravity; classDef gravity fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class eventA,eventB,eventC,eventD event; classDef event fill:#666,color:#fff,stroke:#fff,stroke-width:3px; class collectionA,collectionB,collectionC collection; classDef collection fill:#fffe,color:#B00,stroke:#B00,stroke-width:5px; class source,targetA database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 資料集的組成 當事件被分類到資料集後，會以「事件歷史紀錄（Event History）」和「資料快照（Snapshot）」兩種形式保存下來。</description></item><item><title>Debezium</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/debezium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/debezium/</guid><description/></item><item><title>Kafka</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/kafka/</guid><description/></item><item><title>Kafka</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/kafka/</guid><description>Kafka Transmitter 用於接收 GRAVITY 資料節點的資料，並即時推送至 Kafka 訊息佇列系統。</description></item><item><title>MongoDB</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mongodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mongodb/</guid><description>MongoDB Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MongoDB 資料庫系統。</description></item><item><title>MSSQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/mssql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/mssql/</guid><description>MSSQL Adapter 用於接受 MSSQL 的資料，會利用 CDC 監聽 MSSQL 資料庫的變更事件，進行即時的資料收集。</description></item><item><title>MSSQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mssql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mssql/</guid><description>MSSQL Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MSSQL 資料庫系統。</description></item><item><title>MySQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/mysql/</guid><description>MySQL Adapter 用於接受 MySQL 的資料，會利用 CDC 監聽 MySQL 資料庫的變更事件，進行即時的資料收集。</description></item><item><title>MySQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/mysql/</guid><description>MySQL Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MySQL 資料庫系統。</description></item><item><title>Native</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/gravity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/gravity/</guid><description>Native Adapter 可以連接另一個 GRAVITY 資料節點，將該資料節點當作一個資料源，從中接收資料。常用於跨雲、資料中繼等應用，以及協助資料節點做分流，降低特定資料節點之壓力。</description></item><item><title>NATS</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/nats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/nats/</guid><description/></item><item><title>NATS</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/nats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/nats/</guid><description>NATS Transmitter 用於接收 GRAVITY 資料節點的資料，並即時推送至 NATS 訊息佇列系統。</description></item><item><title>Oracle</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/oracle/</guid><description>Oracle Adapter 用於接受 Oracle 的資料，會利用 CDC 監聽 Oracge 資料庫的變更事件，進行即時的資料收集。
目前 GRAVITY 支援兩種方式連接 Oracle：
Debezium Oracle Adapter 企業版（Enterprise Edition）</description></item><item><title>Oracle</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/oracle/</guid><description>Oracle Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 Oracle 資料庫系統。</description></item><item><title>PostgreSQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/postgres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/database/postgres/</guid><description>Postgres Adapter 用於接受 PostgreSQL 的資料，會利用 CDC 監聽 PostgreSQL 資料庫的變更事件，進行即時的資料收集。</description></item><item><title>PostgreSQL</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/postgres/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/database/postgres/</guid><description>Postgres Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 PostgreSQL 資料庫系統。</description></item><item><title>REST</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/adapter/other/rest/</guid><description/></item><item><title>REST</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/transmitter/other/rest/</guid><description>REST Transmitter 用於接收 GRAVITY 資料節點的資料，並即時以呼叫指定 Restful API 的方式，將資料推送至目標服務。</description></item><item><title>企業資料孤島問題</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/silo-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/silo-problem/</guid><description>過去企業資料散落在不同的系統之中，當有應用需要使用時，就會面臨資料取用困難的問題。這資料孤島的問題長久以來困擾著企業，尤其在做數位轉型時，更造成新業務、新應用因為資料供應能力不足的問題，而不易落實。因此，資料孤島的問題是迫切需要解決的關鍵，導入數據中台技術的最重要目的，就在這裡。
以 GRAVITY 實現資料代理，滿足各式資料調度需求 數據中台即是為了解決資料孤島而生，利用資料的代理等管理技術，調度資料並供應給有需求的應用。GRAVITY 能大幅度提升既有資料系統的能力，並強化資料存取保護，讓企業在面對大數據、更多的應用需求時，其資料調度和供應的過程中大量資料轉移和發佈工作，不會衝擊資料源和既有的資料庫系統，無論需要資料的應用再多，還是併發查詢越多都仍然不影響。
從巨量數據處理，升級成巨量併發處理 傳統以資料倉儲（DWH, Data Warehouse）技術，將資料集中後，以更大型的資料湖來解決資料聚合調度的問題，雖滿足了「巨量數據處理」的需求，但面對「併發資料處理」的需求仍束手無策。為此，GRAVITY 提供更輕量彈性的資料代理和可擴充節點技術，甚至可以整合既有的資料倉儲，讓系統從巨量資料處理進一步滿足「併發量」的實務資料需求。
順帶實現資料虛擬化，讓所有資料庫系統合而為一 存取眾多的資料庫系統，對應用開發和管理上而言極為痛苦，尤其當資料庫系統又是各類異質資料庫，不同的介接方法、使用規範、操作邏輯，都帶來應用程式開發的困擾，且工作效率極低。利用 GRAVITY 的軟體定義數據中台技術，可以以「資料虛擬化」重塑整個資料存取介面，讓應用只需面對一個資料庫，即可獲取來自各資料庫系統的資料。
註：缺少資料代理技術的資料虛擬化，很容易造成資料源頭的壓力，而且難以實現即時的資料同步。</description></item><item><title>快速上手</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/getting-started/quick-start/</guid><description>本文件作爲 Gravity Quick-Start 的快速部署操作指引，將說明如何部署一套最簡單的 Gravity 資料複寫（Replication）管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫。
flowchart LR source([MySQL\n資料庫系統]) -- |推送資料更新| gravity{{GRAVITY}} gravity((GRAVITY\n數據鏈路節點)) -- |寫入資料| target([PostgreSQL\n資料庫系統]) class gravity gravity; classDef gravity fill:#fff,color:#b00,stroke:#b00,stroke-width:5px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px; 環境準備 此範例將利用 Docker 進行部署，如果測試系統上還沒安裝 docker-compose 套件，請先完成安裝：
# for Ubuntu: apt-get install -y docker-compose # for CentOS: yum install -y docker-compose 如果你已經安裝好 docker-compose，那就可以正式開始 Gravity 的安裝。
安裝 Gravity 待系統環境準備好後，可以開始安裝 Gravity 相關的元件。</description></item><item><title>改善資料落檔作業的問題</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/usecases/export-to-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/usecases/export-to-file/</guid><description>資料庫系統的資料交換一直是企業的痛，不管是跨部門、跨系統還是橫跨企業組織，有太多的問題、風險和潛在成本存在，於是大多數人最終還是選擇用最原始的資料交換媒介「檔案」。這在業界普遍被稱作「落檔作業」，其作法就是將外部系統所需要的資料，定期從資料庫爬出來後，放置在一個雙方系統能共同存取的儲存空間。然後外部系統就會定期來將檔案搬回自家環境，把檔案內容解開寫入到本地資料庫內，接著再進行各種資料的處裡工作，
這樣的做法看起來原始笨拙，但卻解決了一些重要的問題，並以下列為前提實現資料交換的工作：
無需讓外部系統直接接觸內部資料庫 可以避免外部而來的大量查詢直接衝擊資料庫 可以控制批次爬資料庫的時間，盡量避免影響正常業務執行 資料庫系統管理人可以一定程度管控資料進出 無需冒著系統不安全性、不穩定性的風險來提供資料 資料落檔作業的缺點 然而，資料落檔作業其實是種實務上的妥協，並不是理想的做法。這種作法往往帶來許多系統的限制，甚至在資料量大時仍然無法避免既有資料庫系統壓力，更多時候是以傷害使用者體驗、捨去需求之下的堪用做法。
資料非常不即時 每次落檔作業的時間很能很長 落檔作業執行時會造成資料庫系統巨大壓力，影響正常業務運行 需要資料的外部系統越多，對系統影響越大 每次不同需求，都需要開發客製化落檔作業程式 每次都需要資料庫系統原負責團隊協助開發 需要大量跨團隊溝通、制定資料交換格式和方法 每次跨系統介接都需要花大量討論和規劃開發的時間 基於上述種種原因，大多數系統負責團隊，多數時候不願意提供資料給外部系統，以免帶來不必要的額外麻煩。也因為資料交換成本高，也不利於大規模的系統介接和整合，更不利於應用的發展。
如何以 GRAVITY 進行改善？ GRAVITY 能提供更好的方法，實現跨系統的資料交換，能提供應用即時資料，而且無損原始資料庫的效能和穩定性。每次的跨系統資料介接工作，都無需開發任何程式，只需要簡單的設定、授權即可，省時又省力。
做法上，會建立 GRAVITY 資料代理節點，以即時監聽資料庫變更事件，並對變更資料進行快取。而外部系統再不碰觸原始資料庫系統的情況下，以統一方式對所需的資料進行訂閱，被訂閱的資料會即時推送出來，甚至依據設定直接寫入外部系統的資料庫。
總體來說，改善後的優點如下：
可以即時提供資料給外部系統 原始資料庫永遠沒有額外的壓力或負擔 外部系統不能直接觸內部資料庫 資料進出可被控管 統一資料訂閱模式，無須多餘的跨團隊溝通 無需開發介接作業程式 資料可隨訂閱隨用，跨系統介接迅速 導入 GRAVITY 後，除了可以保持資料落檔作業的優點，也能避免其缺點。</description></item><item><title>舊資料庫系統效能挑戰</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/legacy-system-enhance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/legacy-system-enhance/</guid><description>舊系統之所以難以支撐新應用的發展，是因為應用的資料壓力都集中在資料庫系統之上。而在過去舊系統的設計裡，可能原本就沒有考量到高併發的巨量查詢需求，這導致系統從一開始就不是為此所設計。由於所有的查詢效能表現，都完全仰賴著資料庫系統本身的表現，若又受限於老舊的資料庫技術，很難改善改善併發查詢效率。
如今，當外部應用一個個被建立，存取需求快速增加，造成舊系統將承受來自四面八方的資料查詢壓力，原本有限能力的資料庫系統就崩潰了，或是效能變得極差，連甚至原本自己的業務都無法良好運行。所以，如何高效的隔離並保護舊系統的資料庫，使其不被外部應用存取需求所影響就是關鍵。
不只如此，每當有跨業務系統的資料存取，不同的負責團隊總是架起盾牌，深怕對方在大量取用自家系統資料時，將自己的系統打到崩潰。誰都不願意去擔系統崩潰的責任，於是誰都不好過，最後傷及的是應用的使用者體驗或是業務執行的效率。
關於如何提高舊系統效能，可以參考下列說明：
以不改動舊系統前提，擴大資料供給能力 以規範化的資料供應機制，取代人工提取資料 即時供應資料給外部程式 以不改動舊系統前提，擴大資料供給能力 當許多外部應用服務所需的資料，其來源都來自舊系統，有限能力的舊系統資料庫根本無法處理如此大量的查詢、資料交換工作。這代表我們必須要提升舊系統供給資料的能力，才能滿足這些外部應用服務的各種需求。而由於舊系統因為歷史悠久或複雜度高，不只是不易改動既有的系統程式或資料庫系統架構，系統改造成本和風險也極高，因此需要一種非侵入式的方案，在不改動舊系統的前提之下，就能擴大資料供給能力的方式。
在導入 GRAVITY 軟體定義數據中台技術後，可以在既有資料庫系統外形成一個中介保護層，並以外部的資料節點，對舊有資料系統進行快取和副本擴展，讓更多應用可以在不碰觸舊系統的情況下，進行巨量的併發查詢。
以規範化的資料供應機制，取代人工提取資料 舊系統的資料庫通常經過層層保護，不願意讓外部應用程式直接伸手觸碰。對於該系統的負責團隊來說，外部對資料庫的各式資料需求，是一件痛苦不堪的事。除了需要與外部團隊「溝通」資料介接機制之外，也深怕系統穩定性和安全性受到影響。尤其最沒有效率的是，需要由開發人員去開發各種資料抽取的程式，以提供資料給外部系統。
為解決這問題，GRAVITY 能將資料自動化供應給外部被核可和授權的程式，亦可指定資料供應範圍，限縮外部資料獲取的權限。
即時供應資料給外部程式 過去為了不要因爬資料造成資料庫系統負擔，資料管理者會以「批次（Batch）」的做法，定期掃描資料庫，並將資料落下存放在特定儲存空間，讓外部系統讀取。此種作法的資料供應效率非常不即時、也沒有效率，若是有許多外部應用程式都需要資料，多次「落檔」處理也會造成資料庫系統的巨大壓力，甚至影響正常業務運行。
採用 GRAVITY 之後，可以監聽資料庫的變更行為，提供最即時的資料輸出，外部應用只需要訂閱資料，即可從舊系統中取得最新、最即時的資料。</description></item><item><title>跨組織單位資料分治管理</title><link>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/data-governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brobridgeorg.github.io/gravity-website/zh-tw/solutions/data-governance/</guid><description>實務上，跨組織單位的資料讀取和隔離性相當不容易達成，一方面不同組織單位的資料庫系統可能不同，資料格式的設計風格不同，存取方式或管理規範也可能不同；另一方面，開放資料庫給外部單位存取，意味著開了一個高風險的後門，面對大量的資料要求，反而可能會造成自家資料庫系統的極大壓力。所以，多數企業、組織單位，並不會隨意容許其他單位的應用程式直接接觸自家的資料系統，以免遭遇不必要的麻煩。
然而不同組織單位間的資料仍然有共享或互相存取的需求，過往做法都需大量仰賴開發人員設計各種 ETL 管線、落檔機制甚至是 API，然後又設計一系列驗證授權機制以確保資料安全性。每次搭建一套資料交換機制，少則數天多則數週，耗時又耗力。而面對外部來的資料庫併發查詢量暴增問題，則是花時間經歷搭建複雜的叢集系統去應對，也相當沒有效率。
實現可控管的單一資料出口 以 GRAVITY 實現資料庫系統的代理節點，從此之後，外部應用程式只能透過訂閱代理節點上的資料，來獲取資料庫系統的資料，不再有任何應用程式可以直接伸手接觸重要的資料庫系統。這樣單一的資料出口，可嚴格控管前來訂閱資料的連線和身份授權。
降低網路頻寬壓力 透過 GRAVITY 訂閱和獲取資料，其機制能大幅度減少傳輸資料量以降低網路頻寬壓力，讓跨雲、跨域、跨組織單位間的資料交換能更有效率。
實現跨域的高併發查詢 GRAVITY 提供資料中繼的機制，再加上副本擴展的方便性，可以提取外部組織的資料到本地端，然後在本地端放大資料供應能力，使本地應用業務能大量查詢使用，而不造成外部組織的系統壓力。</description></item></channel></rss>