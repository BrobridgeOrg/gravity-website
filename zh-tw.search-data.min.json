[{"id":0,"href":"/gravity-website/zh-tw/about/introduction/","title":"GRAVITY 簡介","parent":"關於 GRAVITY","content":"為因應數位轉型的資料架構需要，寬橋（Brobridge）打造了 GRAVITY 作為資料系統的關鍵基礎設施技術，輕易解決企業內眾多應用的資料交換、供應問題，讓企業真正終結資料孤島的問題，全面滿足所有應用的資料需求。無論使用的資料庫系統為何，都不必再擔心資料庫系統擴展性、併發查詢能力和效能不足的問題，讓應用盡情地使用企業內各種資料。\n導入「軟體定義」的數據中台技術後，資料系統架構不再臃腫巨大、複雜的難以維護，過去需要依賴龐大叢集架構才能達成的各種功能，皆可以輕易實現。GRAVITY 能依據應用的實際情境，更彈性地量身打造高效、高彈性的資料系統，無需大規模改造既有資料庫系統架構。並能擴大既有資料庫系統的吞吐能力、擴展能力和容錯能力，以同時滿足「巨量資料」和「高併發」的目標，支撐千變萬化之商業應用，為企業成就更高的數位轉型價值。\n此外，跨雲的資料需求，也可以藉由打造跨域的 GRAVITY 數據節點，實現高速資料遷移、聚合、快取，如同內容傳遞網路（CDN）一般快速發佈到不同的雲端平台，讓應用程式能直接在最近的資料節點上取的所需資料。為了控管資料存取，您也可以用 GRAVITY 打造數據網格（Data Mesh）管理機制，嚴密控管所有的資料節點和資料系統基礎設施，實現跨第三方的資料交換和發佈供應。\n 什麼是數據中台？    數據中台是資料庫和資料庫之間的中間層，提供一個資料流抽象層，讓分散在不同系統的數據資料，得以自由調度、整合、發佈以滿足眾多實際應用的需要。以往資料管理和調度的工作，需仰賴單一特定的資料庫或資料倉儲系統來完成，擴充彈性有限、用途也受限特定架構，因此效能表現難以兼顧「巨量資料」和「高併發」的需求，並且多資料使用者的管理更是一大痛點。而數據中台技術的導入，能讓資料庫和資料倉儲系統專心於本來的業務之上，無需擔心擴展或高併發作業的問題，也從中間層的角度實現資料權限的管控。\n可以說，數據中台目的在於實現「軟體定義」的資料系統架構，讓既有資料系統從傳統孤島（Silo）型架構，變成一個極具彈性、擴展性、任何系統能相互支援的全新樣貌，以滿足任何數位轉型的需要。\n以下是導入數據中台的十大好處：\n 提升既有資料庫系統的各項效能表現 延續老系統的壽命，增加其擴展和容錯能力 滿足應用系統的高效率資料調度需求 保護既有資料庫系統不受巨量應用的效能衝擊 簡化跨組織、單位的資料控管和治理 實現數據資料的即時應用 跨異質資料庫系統的整合 跨雲、跨資料庫系統、跨應用的資料遷移 快速實現各類資料庫熱備援和備份 資料系統有更短的反應時間和擴展彈性，滿足應用業務未來千變萬化的不合理需求  以更貼近日常生活的例子來說明\n想像有個系統提供了一個可客制的物流平台，讓貨物不再只從特定單一的大型集中倉庫出貨，而是可以依照業務需求設計物流鏈路和流程，將貨物分送到離目標更近的倉庫或轉運節點，以成本更低、效率更好也更輕鬆的方式，供應貨物給商店或終端使用者。若目標地區使用者密度大、貨物需求量高，則可以擴大地區倉庫或增加更多中繼倉庫，配合新的地區物流鏈路設計，來滿足更多的需求。而這樣高度彈性能自由打造物流鏈路系統的平台，套用在資料系統上就是數據中台所扮演的角色。\n "},{"id":1,"href":"/gravity-website/zh-tw/adapter/database/","title":"資料庫","parent":"資料源適配器","content":""},{"id":2,"href":"/gravity-website/zh-tw/transmitter/database/","title":"資料庫","parent":"資料傳輸器","content":""},{"id":3,"href":"/gravity-website/zh-tw/about/","title":"關於 GRAVITY","parent":"GRAVITY","content":""},{"id":4,"href":"/gravity-website/zh-tw/adapter/other/","title":"其他","parent":"資料源適配器","content":""},{"id":5,"href":"/gravity-website/zh-tw/transmitter/other/","title":"其他","parent":"資料傳輸器","content":""},{"id":6,"href":"/gravity-website/zh-tw/getting-started/customized-first-pipe/","title":"客製化打造第一條管線","parent":"準備開始","content":"如果你已經閱讀過「快速上手」，應該已經知道 GRAVITY 能透過 Docker 進行快速部署。只不過因為在該文件中並沒有說明設定細節，你可能還不知道如何客製化一條真正有用的資料管線。因此，本文件將延續案例，示範如何打造您的第一條資料管線之外，並會初步針對設定工作進行更多細節說明。\n 實作目標    延續快速上手的範例，本文的實作目標仍然是打造一條管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫，如下圖所示：\n  flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;  注意\n這裡假設你已經分別安裝好 MySQL 和 PostgreSQL，如果尚未安裝資料庫系統，請先準備好環境後再繼續進行本文件的指引。\n  環境準備    GRAVITY 使用 NATS 作為核心的訊息交換引擎，再開始一切安裝部署之前，需要先安裝 NATS 元件：\nversion: \u0026#39;3\u0026#39; services: # Gravity Core Components internal-nats-server: image: \u0026#34;nats:2.2.6\u0026#34; restart: always expose: - \u0026#34;4222\u0026#34; ports: - \u0026#34;4222:4222\u0026#34; 正常安裝完成後，NATS 應該會運行在 localhost:4222 之上，接下來我們將會以此位置進行 GRAVITY 的設定。\n 安裝設定與部署     flowchart LR source([MySQL]) -- |推送資料更新| adapter(資料源適配器\\nAdapter) subgraph GRAVITY adapter(資料源適配器\\nAdapter) -- gravity{{GRAVITY\\n資料節點}} gravity{{GRAVITY\\n資料節點}} -- transmitter(資料傳輸器\\nTransmitter) end transmitter(資料傳輸器\\nTransmitter) -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#b00,color:#fff,stroke:#800,stroke-width:3px; class adapter adapter; classDef adapter fill:#555,color:#fff,stroke:#fff,stroke-width:3px; class transmitter transmitter; classDef transmitter fill:#222,color:#fff,stroke:#fff,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;  Step 1: 部署 GRAVITY 資料節點    GRAVITY 的資料節點由控制器（Controller）和同步器（Synchronizer）兩個核心元件所組成，我們分別各準備一個 YAML 為其做設定和部署：\ncontroller.yaml  1 2 3 4 5 6 7 8 9 10 11 12  version:\u0026#39;3\u0026#39;services:gravity-controller:image:\u0026#34;brobridgehub/gravity-controller:v2.0.0\u0026#34;hostname:gravity-controllerrestart:always# 將 NATS 的連線位置設定在此environment:- GRAVITY_CONTROLLER_GRAVITY_HOST=localhost- GRAVITY_CONTROLLER_GRAVITY_PORT=4222    synchronizer.yaml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  version:\u0026#39;3\u0026#39;services:gravity-synchronizer:image:\u0026#34;brobridgehub/gravity-synchronizer:v4.0.0\u0026#34;restart:alwayshostname:gravity-synchronizerenvironment:GRAVITY_SYNCHRONIZER_GRAVITY_HOST:localhostGRAVITY_SYNCHRONIZER_GRAVITY_PORT:4222GRAVITY_SYNCHRONIZER_RULES_SETTINGS:|{ \u0026#34;rules\u0026#34;: [ { \u0026#34;event\u0026#34;: \u0026#34;accountInitialized\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;accountData\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;insert\u0026#34;, \u0026#34;primaryKey\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;mapping\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;id\u0026#34; }, { \u0026#34;source\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;name\u0026#34; } ] }, { \u0026#34;event\u0026#34;: \u0026#34;accountCreated\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;accountData\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;insert\u0026#34;, \u0026#34;primaryKey\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;mapping\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;id\u0026#34; }, { \u0026#34;source\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;name\u0026#34; } ] } ] }     Step 2: 部署資料源適配器（Adapter）     adapter-mysql.yaml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  version:\u0026#39;3\u0026#39;services:gravity-adapter-mysql:image:\u0026#34;brobridgehub/gravity-adapter-mysql:v2.0.0\u0026#34;restart:alwayshostname:gravity-adapter-mysqlenvironment:# NATS 的連線資訊GRAVITY_ADAPTER_MYSQL_GRAVITY_HOST:172.17.0.1GRAVITY_ADAPTER_MYSQL_GRAVITY_PORT:4222# 設定資料源的連線資訊，以及監聽指定資料表(users) 的新資料事件GRAVITY_ADAPTER_MYSQL_SOURCE_SETTINGS:|{ \u0026#34;sources\u0026#34;: { \u0026#34;mysql_example\u0026#34;: { \u0026#34;disabled\u0026#34;: false, \u0026#34;host\u0026#34;: \u0026#34;172.17.0.1\u0026#34;, \u0026#34;port\u0026#34;: 3306, \u0026#34;username\u0026#34;: \u0026#34;root\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;1qaz@WSXROOT\u0026#34;, \u0026#34;dbname\u0026#34;: \u0026#34;gravity\u0026#34;, \u0026#34;initialLoad\u0026#34;: true, \u0026#34;tables\u0026#34;: { \u0026#34;users\u0026#34;: { \u0026#34;events\u0026#34;: { \u0026#34;snapshot\u0026#34;: \u0026#34;accountInitialized\u0026#34;, \u0026#34;create\u0026#34;: \u0026#34;accountCreated\u0026#34; } } } } } }     Step 3: 部署資料傳輸器（Transmitter）     trnsmitter-postgres.yaml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  version:\u0026#39;3\u0026#39;services:gravity-transmitter-postgres:image:\u0026#34;brobridgehub/gravity-transmitter-postgres:v3.0.0\u0026#34;hostname:gravity-transmitter-postgresrestart:alwaysenvironment:# NATS 的連線資訊GRAVITY_TRANSMITTER_POSTGRES_GRAVITY_HOST:172.17.0.1:4222# 目標資料庫的連線資訊GRAVITY_TRANSMITTER_POSTGRES_DATABASE_HOST:172.17.0.1GRAVITY_TRANSMITTER_POSTGRES_DATABASE_PORT:5432GRAVITY_TRANSMITTER_POSTGRES_DATABASE_USERNAME:postgresGRAVITY_TRANSMITTER_POSTGRES_DATABASE_PASSWORD:1qaz@WSXGRAVITY_TRANSMITTER_POSTGRES_DATABASE_DBNAME:gravity# 設定要訂閱的資料集(accountData)，以及要寫入的資料表(accounts)GRAVITY_TRANSMITTER_POSTGRES_SUBSCRIPTION_SETTINGS:| {\u0026#34;subscriptions\u0026#34;: {\u0026#34;accountData\u0026#34;: [\u0026#34;accounts\u0026#34;]}}depends_on:      驗證管線    "},{"id":7,"href":"/gravity-website/zh-tw/about/architecture/","title":"技術架構說明","parent":"關於 GRAVITY","content":"GRAVITY 是資料庫與資料庫之間溝通的中介層，讓資料庫的資料藉由中介資料節點，可以分流、遷移、複製、快取於不同的系統之中。為了連接和適應各種不同的資料庫系統、應用系統，GRAVITY 被設計得相當輕量，而且具有許多彈性，方便資料管理者、開發人員可以自由部署和設計自己所需的資料系統架構。\nGRAVITY 主要元件    設計上，GRAVITY 主要工作是建立一個資料節點，然後從資料源接收資料，並對資料進行記錄、快照等工作。有需要的應用系統，可以跟資料節點訂閱資料，並將資料落地於指定的資料庫系統、訊息佇列或推送至另一個應用程式。\n為實現這樣的機制，GRAVITY 由三大元件所組成：\n 資料源適配器：Adapter 資料節點同步器：Synchronizer 資料傳輸器：Transmitter  資料源適配器：Adapter    資料源適配器（Adapter）用於從資料源（Data Source）收集資料，並將資料送入資料節點同步器。\n資料節點同步器：Synchronizer    資料節點同步器（Synchronizer）會將資料分類保存，並即時生成資料快照（Snapshot）。\n資料傳輸器：Transmitter    資料傳輸器（Transmitter）會在資料節點上訂閱資料，然後將資料寫入到目標的資料庫、訊息佇列或是應用系統。\n"},{"id":8,"href":"/gravity-website/zh-tw/getting-started/","title":"準備開始","parent":"GRAVITY","content":""},{"id":9,"href":"/gravity-website/zh-tw/about/scenario/","title":"應用場景","parent":"關於 GRAVITY","content":"GRAVITY 能立即改善既有資料庫系統的各種問題，無需改造應用程式，也不用改造並搭建複雜、難以維護的資料庫叢集。資料系統架構師可以依據應用場景，引入不同的 GRAVITY 參考架構，自由組合成所需的各類解決方案。\n以下是常見的應用場景：\n   老資料庫系統負荷過高 需要瞬間巨量寫入資料 滿足大量併發查詢 資料快取 實現跨資料庫系統的大量併發查詢 異質資料庫整合和抄寫 跨雲資料遷移、快取、大量併發查詢 跨組織單位的資料控管，數據網格管理 資料庫熱備援     老資料庫系統負荷過高    隨著數位轉型對資料的需求越來越多，應用程式也不斷增加，過去老舊系統的資料庫系統同不堪負荷。由於改造老系統的風險太高，甚至是舊技術已鮮有人懂，以致提升老系統能力是一大痛點。為此， GRAVITY 能在對資料庫不侵入的情況下，擴大老舊系統的併發查詢能力、寫入能力，讓老系統的表現也能跟得上新應用的發展。\n需要瞬間巨量寫入資料    大量的資料寫入會造成資料庫衝擊，除了寫入效率差之外，還可能會因為寫入失敗而遺失資料。利用 GRAVITY 的資料調度能力，能實現資料庫的寫入分流、分片（Sharding），讓資料庫得以橫向擴展來強化寫入效率。在這樣的架構下，無需改動任何應用程式連接資料庫系統的方法，可無痛增強既有架構。\n滿足大量併發查詢    無論是龐大的使用者同時使用系統，還是無數的應用跨系統進行資料查詢，巨量的併發查詢總是讓資料庫崩潰。為滿足這樣的大量查詢，GRAVITY 提供了「更快速」、「更彈性」的架構方法，只要簡單幾個設定，短短數分鐘之內，就能實現多副本抄寫，擴大資料庫系統的查詢能力。\n資料快取    針對一些特殊應用需要頻繁查詢特定資料，或有一定查詢複雜度的工作，GRAVITY 能用資料篩選機制抽取特定欄位之資料，並對該資料進行聚合和快取，大幅度加速特定查詢工作的效率。甚至可以搭配 GRAVITY 多副本擴展機制，近一步擴大資料快取的併發查詢能力。\n實現跨資料庫系統的大量併發查詢    正常情況下，跨多資料庫之間的關聯併發查詢效率極差，甚至會造成網路和資料源頭系統的極高壓力。利用 GRAVITY 的資料聚合機制，可以先將不同資料庫的資料抽取和合併在一起，讓應用取用關聯資料時，無需回到源頭查詢。若對關聯資料有極大併發查詢需求，也可以進一步利用 GRAVITY 多副本抄寫機制，對其進行擴展。\n異質資料庫整合和抄寫    因應不同應用程式的需求，會需要讓資料落地於不同類型的資料庫，方便進行處理；也需要從不同的資料庫取得資料，進行各類整合應用。利用 GRAVITY 可以輕易的讓資料在不同的資料庫系統之間複製、抄寫、聚合，滿足這類異質資料庫的整合需求。\n跨雲資料遷移、快取、大量併發查詢    跨雲的資料需求往往造成嚴重的網路壓力，這類跨域、跨網路資料查詢的效率也不佳。在這種情況下，利用 GRAVITY 的資料節點作為中繼站，可以壓縮跨雲之間的通俊資料量，紓解往返（Round-Trip）查詢的的龐大壓力。若同時應用 GRAVITY 的各種資料調度機制，實現跨雲的資料快取、發佈、聚合，滿足於另一個雲端平台上的應用需求。\n跨組織單位的資料控管，數據網格管理    跨組織、單位、第三方的資料存取需求，總是一個難以解決的麻煩，除了大量查詢會造成另一個組織的系統壓力之外，資料授權機制更是讓不同組織的管理人員、開發人員花大量時間規劃和開發。GRAVITY 利用資料代理節點所組成的數據網格，統一了跨組織的資料訂閱方式，免除了直接查詢所造成的存取壓力問題，也間接在組織資料庫系統外，打造了一層保護，針對資料集進行嚴密的權限控管。\n資料庫熱備援    資料庫的備份和備援，一直都是企業在資料系統上不可缺少的一環。在這數位轉型的時代，任何的一筆資料都是很重要的存在，熱備援和熱備份能保證資料被即時的保存下來，以保證主資料庫系統損毀或失效時，在系統回復後能夠沒有資料的落差。GRAVITY 的資料抄寫和副本機制，可以協助企業對任何資料庫系統進行即時的資料抄寫，無需建構傳統主從架構（Master-Slave）叢集就可達成。\n"},{"id":10,"href":"/gravity-website/zh-tw/solutions/","title":"解決方案","parent":"GRAVITY","content":""},{"id":11,"href":"/gravity-website/zh-tw/about/basic-requirements/","title":"基本系統需求","parent":"關於 GRAVITY","content":"GRAVITY 設計上走輕量、彈性路線，部署規模可以依據實際需求而定，而針對不同考量，目前標準支援兩種部署的環境：\n 使用 Docker 使用 Kubernetes 容器調度平台（企業版本專屬）  "},{"id":12,"href":"/gravity-website/zh-tw/adapter/","title":"資料源適配器","parent":"GRAVITY","content":""},{"id":13,"href":"/gravity-website/zh-tw/about/faq/","title":"FAQ 疑難排解","parent":"關於 GRAVITY","content":"這裡收集了一些對於 GRAVITY 的常見問題，以及相關疑難解答。\n   一般問題  GRAVITY 是資料庫或資料倉儲嗎？ 資料庫抄寫很普通，GRAVITY 有什麼過人之處？ GRAVITY 需要付費才能使用嗎？   部署相關問題  目前 Gravity 支援哪些作業系統平台環境 Gravity 是否只能在 k8s 環境內執行使用 Gravity 可以支援讀取哪些資料庫的 CDC (資料擷取) 的支援有哪些 Gravity 可以將資料處理完成後輸出寫入目的資料庫，可支援寫入資料庫平台 使用 Oracle 資料庫的 CDC 功能，資料庫系統是否要啟用 goldengate 支援 Gravity 對不同來源資料庫 CDC 的數據處理能力為何       一般問題    GRAVITY 是資料庫或資料倉儲嗎？     不是，GRAVITY 並不是資料庫系統或是資料倉儲。\nGRAVITY 是資料庫與資料庫之間的中間層，讓分散在不同系統的數據資料，得以自由調度、整合、發佈和快取，以滿足眾多實際應用的需要。\n 資料庫抄寫很普通，GRAVITY 有什麼過人之處？     資料庫抄寫只是 GRAVITY 的眾多功能之一，事實上 GRAVITY 還提供各種強化和擴充資料庫系統的功能，而且可以靈活組裝使用。\n運用 GRAVITY 打造的資料系統架構，齉你可以對資料進行一對一抄寫、建立多個副本，也可以針對特定欄位進行快取，甚至進行資料分片、分片副本、分片再分片等都不是問題。異質資料庫的支援，也可以讓你的資料在不同類型資料庫中任意轉移，滿足各類應用的特殊需要。\n如果您還是不了解 GRAVITY 可以帶來哪些效益，可以參考我們整理的「解決方案」進行更多暸解。\n GRAVITY 需要付費才能使用嗎？     GRAVITY 的開放原始碼社群版可以免費使用，基本上可以滿足大多數常見的資料調度需求。但如果社群版的功能無法完全滿足您的需求，可以選擇購買企業版本，將有數據中台專家顧問為您提供各類服務。\n  部署相關問題    目前 Gravity 支援哪些作業系統平台環境    Gravity 是否只能在 k8s 環境內執行使用    Gravity 可以支援讀取哪些資料庫的 CDC (資料擷取) 的支援有哪些    Gravity 可以將資料處理完成後輸出寫入目的資料庫，可支援寫入資料庫平台    使用 Oracle 資料庫的 CDC 功能，資料庫系統是否要啟用 goldengate 支援    Gravity 對不同來源資料庫 CDC 的數據處理能力為何    "},{"id":14,"href":"/gravity-website/zh-tw/transmitter/","title":"資料傳輸器","parent":"GRAVITY","content":""},{"id":15,"href":"/gravity-website/zh-tw/categories/","title":"Categories","parent":"GRAVITY","content":""},{"id":16,"href":"/gravity-website/zh-tw/adapter/other/debezium/","title":"Debezium","parent":"其他","content":""},{"id":17,"href":"/gravity-website/zh-tw/","title":"GRAVITY","parent":"","content":"打造資料庫與資料庫的連結     快速上手   瞭解更多   快速安裝 GRAVITY：\ndocker-compose up  立即解決資料庫系統效能問題    非侵入、低風險、快速設定的無痛導入\n巨量寫入      併發查詢      資料快取        為什麼要使用 GRAVITY？    導入「軟體定義」的資料庫基礎設施平台 GRAVITY\n能打造現代資料系統架構，實現高效、高彈性的數據中台\n擴大資料庫系統吞吐能力、擴展能力和容錯能力\n隨機應變滿足千變萬化之商業應用，為企業成就更高的數位轉型價值\n "},{"id":18,"href":"/gravity-website/zh-tw/adapter/other/kafka/","title":"Kafka","parent":"其他","content":""},{"id":19,"href":"/gravity-website/zh-tw/transmitter/other/kafka/","title":"Kafka","parent":"其他","content":"Kafka Transmitter 用於接收 GRAVITY 資料節點的資料，並即時推送至 Kafka 訊息佇列系統。\n"},{"id":20,"href":"/gravity-website/zh-tw/transmitter/database/mongodb/","title":"MongoDB","parent":"資料庫","content":"MongoDB Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MongoDB 資料庫系統。\n"},{"id":21,"href":"/gravity-website/zh-tw/adapter/database/mssql/","title":"MSSQL","parent":"資料庫","content":"MSSQL Adapter 用於接受 MSSQL 的資料，會利用 CDC 監聽 MSSQL 資料庫的變更事件，進行即時的資料收集。\n"},{"id":22,"href":"/gravity-website/zh-tw/transmitter/database/mssql/","title":"MSSQL","parent":"資料庫","content":"MSSQL Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MSSQL 資料庫系統。\n"},{"id":23,"href":"/gravity-website/zh-tw/adapter/database/mysql/","title":"MySQL","parent":"資料庫","content":"MySQL Adapter 用於接受 MySQL 的資料，會利用 CDC 監聽 MySQL 資料庫的變更事件，進行即時的資料收集。\n"},{"id":24,"href":"/gravity-website/zh-tw/transmitter/database/mysql/","title":"MySQL","parent":"資料庫","content":"MySQL Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 MySQL 資料庫系統。\n"},{"id":25,"href":"/gravity-website/zh-tw/adapter/other/gravity/","title":"Native","parent":"其他","content":"Native Adapter 可以連接另一個 GRAVITY 資料節點，將該資料節點當作一個資料源，從中接收資料。常用於跨雲、資料中繼等應用，以及協助資料節點做分流，降低特定資料節點之壓力。\n"},{"id":26,"href":"/gravity-website/zh-tw/adapter/other/nats/","title":"NATS","parent":"其他","content":""},{"id":27,"href":"/gravity-website/zh-tw/transmitter/other/nats/","title":"NATS","parent":"其他","content":"NATS Transmitter 用於接收 GRAVITY 資料節點的資料，並即時推送至 NATS 訊息佇列系統。\n"},{"id":28,"href":"/gravity-website/zh-tw/adapter/database/oracle/","title":"Oracle","parent":"資料庫","content":"Oracle Adapter 用於接受 Oracle 的資料，會利用 CDC 監聽 Oracge 資料庫的變更事件，進行即時的資料收集。\n目前 GRAVITY 支援兩種方式連接 Oracle：\n Debezium Oracle Adapter 企業版（Enterprise Edition）  "},{"id":29,"href":"/gravity-website/zh-tw/transmitter/database/oracle/","title":"Oracle","parent":"資料庫","content":"Oracle Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 Oracle 資料庫系統。\n"},{"id":30,"href":"/gravity-website/zh-tw/adapter/database/postgres/","title":"PostgreSQL","parent":"資料庫","content":"Postgres Adapter 用於接受 PostgreSQL 的資料，會利用 CDC 監聽 PostgreSQL 資料庫的變更事件，進行即時的資料收集。\n"},{"id":31,"href":"/gravity-website/zh-tw/transmitter/database/postgres/","title":"PostgreSQL","parent":"資料庫","content":"Postgres Transmitter 用於接收 GRAVITY 資料節點的資料，並即時寫入 PostgreSQL 資料庫系統。\n"},{"id":32,"href":"/gravity-website/zh-tw/adapter/other/rest/","title":"REST","parent":"其他","content":""},{"id":33,"href":"/gravity-website/zh-tw/transmitter/other/rest/","title":"REST","parent":"其他","content":"REST Transmitter 用於接收 GRAVITY 資料節點的資料，並即時以呼叫指定 Restful API 的方式，將資料推送至目標服務。\n"},{"id":34,"href":"/gravity-website/zh-tw/tags/","title":"Tags","parent":"GRAVITY","content":""},{"id":35,"href":"/gravity-website/zh-tw/solutions/silo-problem/","title":"企業資料孤島問題","parent":"解決方案","content":"過去企業資料散落在不同的系統之中，當有應用需要使用時，就會面臨資料取用困難的問題。這資料孤島的問題長久以來困擾著企業，尤其在做數位轉型時，更造成新業務、新應用因為資料供應能力不足的問題，而不易落實。因此，資料孤島的問題是迫切需要解決的關鍵，導入數據中台技術的最重要目的，就在這裡。\n以 GRAVITY 實現資料代理，滿足各式資料調度需求    數據中台即是為了解決資料孤島而生，利用資料的代理等管理技術，調度資料並供應給有需求的應用。GRAVITY 能大幅度提升既有資料系統的能力，並強化資料存取保護，讓企業在面對大數據、更多的應用需求時，其資料調度和供應的過程中大量資料轉移和發佈工作，不會衝擊資料源和既有的資料庫系統，無論需要資料的應用再多，還是併發查詢越多都仍然不影響。\n從巨量數據處理，升級成巨量併發處理    傳統以資料倉儲（DWH, Data Warehouse）技術，將資料集中後，以更大型的資料湖來解決資料聚合調度的問題，雖滿足了「巨量數據處理」的需求，但面對「併發資料處理」的需求仍束手無策。為此，GRAVITY 提供更輕量彈性的資料代理和可擴充節點技術，甚至可以整合既有的資料倉儲，讓系統從巨量資料處理進一步滿足「併發量」的實務資料需求。\n順帶實現資料虛擬化，讓所有資料庫系統合而為一    存取眾多的資料庫系統，對應用開發和管理上而言極為痛苦，尤其當資料庫系統又是各類異質資料庫，不同的介接方法、使用規範、操作邏輯，都帶來應用程式開發的困擾，且工作效率極低。利用 GRAVITY 的軟體定義數據中台技術，可以以「資料虛擬化」重塑整個資料存取介面，讓應用只需面對一個資料庫，即可獲取來自各資料庫系統的資料。\n註：缺少資料代理技術的資料虛擬化，很容易造成資料源頭的壓力，而且難以實現即時的資料同步。  "},{"id":36,"href":"/gravity-website/zh-tw/getting-started/quick-start/","title":"快速上手","parent":"準備開始","content":"本文件作爲 Gravity Quick-Start 的快速部署操作指引，將說明如何部署一套最簡單的 Gravity 資料複寫（Replication）管線，從 MySQL 即時抄寫所有的變更資料到 PostgreSQL，實現異質資料庫之間的資料抄寫。\n  flowchart LR source([MySQL]) -- |推送資料更新| gravity{{GRAVITY}} gravity{{GRAVITY}} -- |寫入資料| target([PostgreSQL]) class gravity gravity; classDef gravity fill:#fff,color:#333,stroke:#b00,stroke-width:3px; class source,target database; classDef database fill:#eee,color:#555,stroke:#bbb,stroke-width:2px;  環境準備    此範例將利用 Docker 進行部署，如果測試系統上還沒安裝 docker-compose 套件，請先完成安裝：\n# for Ubuntu: apt-get install -y docker-compose # for CentOS: yum install -y docker-compose 如果你已經安裝好 docker-compose，那就可以正式開始 Gravity 的安裝。\n 安裝 Gravity    待系統環境準備好後，可以開始安裝 Gravity 相關的元件。\nStep 1: 下載 YAML    wget https://brobridgeorg.github.io/gravity-examples/deployments/docker-compose.yaml Step 2: 下載資料表定義    wget https://brobridgeorg.github.io/gravity-examples/deployments/createTable.sql Step 3: 部署 Gravity 和資料庫    使用 Quick Start 所提供的 YAML 進行部署，會同時部署 MySQL、PostgreSQL 和 Gravity，並以 .sql 檔案定義在資料庫系統中建立資料表：\ndocker-compose up -d 如果一切順利啟動，沒有任何錯誤，Gravity 會開始監控資料源（MySQL）的資料變化，並將任何變更資料同步一份至目標資料庫（PostgreSQL）。\n 驗證 Gravity    如果你想驗證兩個資料庫之間的資料是否有同步，可以試著插入新的紀錄到 MySQL，然後去 PostgreSQL 檢查是否有同步成功。為節省時間，你也可以直接使用我們已經開發好的工具，來驗證 Gravity 管線是否正常：\ndocker run -it brobridgehub/gravity-demo-verify:latest sh -c \u0026#39;./verify.sh 100\u0026#39;  停止和清理    如果你想停止 Gravity 並清除範例中所產生的資料，可以直接以命令關閉服務：\ndocker-compose down 確認容器都關閉後，即可以刪除 *.yaml、*.sql 和相關目錄。\n"},{"id":37,"href":"/gravity-website/zh-tw/solutions/writes-enhancement/","title":"瞬間大量資料庫寫入挑戰","parent":"解決方案","content":"瞬間大量的資料庫寫入工作，總造成資料庫效能衝擊，嚴重時甚至讓整個應用系統都無法正常運行。對於終端應用來說，資料庫寫入效率與使用者體驗直接相關，極差的寫入效率常讓企業蒙受巨量交易損失，面對大量的寫入壓力而造成系統崩潰時，更嚴重讓企業形象受損。然而，改造資料寫入效率，往往需要從應用程式到資料庫系統進行大範圍的改造，不但改造風險高也相當麻煩。\n為此，GRAVITY 提供企業一種解決方案，在不涉及資料庫系統本身的改動、無需架設和管理複雜的資料庫叢集、也無需強迫應用程式放棄舊有的資料庫系統的前提下，強化資料的寫入效率。\n關於寫入效率的改善，可以參考以下解決方案：\n   為資料庫系統創造寫入緩衝，承受第一時間的瞬間寫入轟炸 打造非侵入式的分片機制，讓寫入效能真正得到提升 應用程式完全不想改，但瞬間寫入、分片機制通通都要 分片節點不夠，持續再強化擴展     為資料庫系統創造寫入緩衝，承受第一時間的瞬間寫入轟炸    瞬間大量的資料寫入，總是會直接造成資料庫巨大的系統壓力，其根本原因是寫入工作會因資料鎖表、建立索引機制等行為，帶來大量資料庫運算資源的消耗，這導致相對於查詢工作來說，寫入操作更是一個資料庫系統的效能殺手。因此，為既有資料庫系統創造寫入緩衝區，避免第一時間的寫入需求直接衝擊原始資料庫，就是一個必要的做法。\n   程式無需改動並維持舊有介接方式，利用多個資料庫處理分散處理第一線寫入需求   打造寫入的緩衝有許多作法，可由於我們並不想改動應用程式，想維持原本資料庫介接的方式，這時可以搭建生成多組臨時資料庫充當原資料庫系統的分身，讓寫入工作分流至不同的資料庫節點上進行寫入，以承受瞬間資料寫入的工作。然後利用 GRAVITY 實現合併複寫（Merge Replication），將多個資料庫節點的資料，逐步同步至原始資料庫，其同步過程中甚至可以利用批次寫入的方式，盡可能減少資料庫的壓力和提高寫入工作的處理效率。\n優點\n 在這樣的方案下，資料庫寫入效率能隨著緩衝節點的動態增加擴展而得到提升。 應用程式對資料庫的介接方式無需改變    打造非侵入式的分片機制，讓寫入效能真正得到提升        利用 GRAVITY 實現資料分片   將資料以特定規則分類、分流寫入不同資料節點儲存，是一個相當常見的手段以提升寫入能力。只是，過去打造分片機制，需要仰賴複雜的資料庫叢集機制，需要專業的設定、維護措施，實現上相當麻煩且沒有效率。在一些沒有官方支援分片的資料庫系統上，實現分片更要完全依靠開發人員自行打造，非常痛苦。為了能更輕鬆打造分片架構，只需要使用 GRAVITY 的幾行設定，指定資料寫入多個目標資料庫，即可馬上實現分片機制。\n優點\n 改善資料庫寫入並保存資料的效能表現    應用程式完全不想改，但瞬間寫入、分片機制通通都要    我們都很貪心，那就用 GRAVITY 一次搞定吧！打造寫入緩衝節點，然後同時實現合併複寫（Merge Replication）並以分片的形式寫到多個目標資料庫，就可以通通都要。\n   寫入緩衝、分片機制，利用 GRAVITY 所有好處通通都一次實現    分片節點不夠，持續再強化擴展    覺得還不夠嗎？您可以利用 GRAVITY 的節點對連架構，進一步擴充資料分片節點的規模，擴充彈性沒有極限。\n   重複利用分片機制，進行更多的分片節點擴展   "},{"id":38,"href":"/gravity-website/zh-tw/solutions/legacy-system-enhance/","title":"舊資料庫系統效能挑戰","parent":"解決方案","content":"舊系統之所以難以支撐新應用的發展，是因為應用的資料壓力都集中在資料庫系統之上。而在過去舊系統的設計裡，可能原本就沒有考量到高併發的巨量查詢需求，這導致系統從一開始就不是為此所設計。由於所有的查詢效能表現，都完全仰賴著資料庫系統本身的表現，若又受限於老舊的資料庫技術，很難改善改善併發查詢效率。\n如今，當外部應用一個個被建立，存取需求快速增加，造成舊系統將承受來自四面八方的資料查詢壓力，原本有限能力的資料庫系統就崩潰了，或是效能變得極差，連甚至原本自己的業務都無法良好運行。所以，如何高效的隔離並保護舊系統的資料庫，使其不被外部應用存取需求所影響就是關鍵。\n不只如此，每當有跨業務系統的資料存取，不同的負責團隊總是架起盾牌，深怕對方在大量取用自家系統資料時，將自己的系統打到崩潰。誰都不願意去擔系統崩潰的責任，於是誰都不好過，最後傷及的是應用的使用者體驗或是業務執行的效率。\n關於如何提高舊系統效能，可以參考下列說明：\n   以不改動舊系統前提，擴大資料供給能力 以規範化的資料供應機制，取代人工提取資料 即時供應資料給外部程式     以不改動舊系統前提，擴大資料供給能力    當許多外部應用服務所需的資料，其來源都來自舊系統，有限能力的舊系統資料庫根本無法處理如此大量的查詢、資料交換工作。這代表我們必須要提升舊系統供給資料的能力，才能滿足這些外部應用服務的各種需求。而由於舊系統因為歷史悠久或複雜度高，不只是不易改動既有的系統程式或資料庫系統架構，系統改造成本和風險也極高，因此需要一種非侵入式的方案，在不改動舊系統的前提之下，就能擴大資料供給能力的方式。\n在導入 GRAVITY 軟體定義數據中台技術後，可以在既有資料庫系統外形成一個中介保護層，並以外部的資料節點，對舊有資料系統進行快取和副本擴展，讓更多應用可以在不碰觸舊系統的情況下，進行巨量的併發查詢。\n 以規範化的資料供應機制，取代人工提取資料    舊系統的資料庫通常經過層層保護，不願意讓外部應用程式直接伸手觸碰。對於該系統的負責團隊來說，外部對資料庫的各式資料需求，是一件痛苦不堪的事。除了需要與外部團隊「溝通」資料介接機制之外，也深怕系統穩定性和安全性受到影響。尤其最沒有效率的是，需要由開發人員去開發各種資料抽取的程式，以提供資料給外部系統。\n為解決這問題，GRAVITY 能將資料自動化供應給外部被核可和授權的程式，亦可指定資料供應範圍，限縮外部資料獲取的權限。\n 即時供應資料給外部程式    過去為了不要因爬資料造成資料庫系統負擔，資料管理者會以「批次（Batch）」的做法，定期掃描資料庫，並將資料落下存放在特定儲存空間，讓外部系統讀取。此種作法的資料供應效率非常不即時、也沒有效率，若是有許多外部應用程式都需要資料，多次「落檔」處理也會造成資料庫系統的巨大壓力，甚至影響正常業務運行。\n採用 GRAVITY 之後，可以監聽資料庫的變更行為，提供最即時的資料輸出，外部應用只需要訂閱資料，即可從舊系統中取得最新、最即時的資料。\n"},{"id":39,"href":"/gravity-website/zh-tw/solutions/replication/","title":"讀寫分離的資料庫擴展挑戰","parent":"解決方案","content":"以往使用資料庫系統的複寫技術（Replication）進行多資料副本，通常需要依賴搭建主從架構（Master-Slave）的叢集機制，這為管理者和開發者帶來許多困難，除了搭建複雜困難之外，維護上也相當不易。如果未來有資料庫規模擴展的需要，傳統叢集的設定和操作更是一大麻煩。這導致大多數企業為降低風險，都會盡量避免去碰觸、擴充資料庫叢集系統，資料庫的改造和擴充，相當沒有效率。\n毫無疑問，面對更大量應用的資料需求、更巨量的查詢需求，其資料庫系統的擴展彈性，便會是數位轉型的關鍵瓶頸。\n幾分鐘內為特定應用實現讀寫分離        使用 Gravity 實現讀寫分離，並能快速擴展副本規模而不影響原始資料庫效能   建立多個資料庫副本，以提高查詢能力，是讀寫分離的核心運作機制。採用 GRAVITY 來實現讀寫分離，無需侵入既有應用程式架構，更不用介入資料庫系統叢集的設定和設計，只需要幾個動作，搭配簡單的設定就可以快速動態搭建完成。未來想要增減資料副本數量，也非常容易和快速，滿足應用臨時的各種資料需求。\n滿足微服務架構的 CQRS Pattern    為確保服務之間的隔離性以及服務本身處理資料的效能，微服務架構強調 Database per service 的設計，並以 CQRS Pattern 來達成。這導致跨系統之間的資料交換是一個大問題，更會讓應用程式的開發難度度增加。以 GRAVITY 實現的 CQRS 架構，只需簡單的設定，讓應用程式開發者無需再費心處理資料交換機制的各類底層問題（效率、穩定性、安全性），可專心開發業務所需的功能，省下大量的開發和維護時間。\n"},{"id":40,"href":"/gravity-website/zh-tw/solutions/data-governance/","title":"跨組織單位資料分治管理","parent":"解決方案","content":"實務上，跨組織單位的資料讀取和隔離性相當不容易達成，一方面不同組織單位的資料庫系統可能不同，資料格式的設計風格不同，存取方式或管理規範也可能不同；另一方面，開放資料庫給外部單位存取，意味著開了一個高風險的後門，面對大量的資料要求，反而可能會造成自家資料庫系統的極大壓力。所以，多數企業、組織單位，並不會隨意容許其他單位的應用程式直接接觸自家的資料系統，以免遭遇不必要的麻煩。\n然而不同組織單位間的資料仍然有共享或互相存取的需求，過往做法都需大量仰賴開發人員設計各種 ETL 管線、落檔機制甚至是 API，然後又設計一系列驗證授權機制以確保資料安全性。每次搭建一套資料交換機制，少則數天多則數週，耗時又耗力。而面對外部來的資料庫併發查詢量暴增問題，則是花時間經歷搭建複雜的叢集系統去應對，也相當沒有效率。\n實現可控管的單一資料出口    以 GRAVITY 實現資料庫系統的代理節點，從此之後，外部應用程式只能透過訂閱代理節點上的資料，來獲取資料庫系統的資料，不再有任何應用程式可以直接伸手接觸重要的資料庫系統。這樣單一的資料出口，可嚴格控管前來訂閱資料的連線和身份授權。\n降低網路頻寬壓力    透過 GRAVITY 訂閱和獲取資料，其機制能大幅度減少傳輸資料量以降低網路頻寬壓力，讓跨雲、跨域、跨組織單位間的資料交換能更有效率。\n實現跨域的高併發查詢    GRAVITY 提供資料中繼的機制，再加上副本擴展的方便性，可以提取外部組織的資料到本地端，然後在本地端放大資料供應能力，使本地應用業務能大量查詢使用，而不造成外部組織的系統壓力。\n"}]